# ================================================================================================ #
#
#   AKTIEBOLAGET SYSTEMSTÖD SVERIGE
#
#     Wilmer Jensen Sternehäll
#     wilmer.sternehall@systemstod.se
#
#   ---
#     Name:
#       XSS_STOCK
#     Description:
#       A Systemstöd function library script containing custom Sage X3 functions developed
#       in a general, comprehensive manner meant to fit any Sage X3 installation.
#
#       The functions in this file are related to STOCK MANAGEMENT.
#
#
#
#   Copyright @ 2018 - 2020, Aktiebolaget Systemstöd Sverige
#
#
# ================================================================================================ #

##############################################################################################################
# < WIST >
#**
#* Checks if an item is in stock.
#*
#* @param SITE The relevant site
#* @param ITEM The item to look for.
#*
#* @return An integer value
#* <pre>
#* 1 = item is in stock
#* 0 = item is not in stock
#* </pre>
#*!
Funprog IS_ITEM_IN_STOCK(SITE, ITEM)
Value Char SITE
Value Char ITEM

  Local File STOCK [YSTO]
  Filter [YSTO] Where STOFCY = SITE and ITMREF = ITEM

  If rowcount([YSTO]) > 0
    End 1
  Endif

End 0

##############################################################################################################
# < WIST >
#**
#* Gets the theoretical lead time limit of an item. The theoretical lead time limit is whatever
#* date is <b>further</b> in time, of:
#*
#* <pre>
#* - Today + reorder lead time from product-site
#* - The furthest in time expected receipt date of any acknowledged purchase order
#* </pre>
#*
#* This means that the normal lead time date (from today) is returned, unless there is a purchase order with an
#* acknowledged date subsequent to this. In that case, that acknowledged date is returned.
#* <pre></pre>
#*
#* @param SITE The relevant site
#* @param ITEM The item to return the theoretical lead time limit of
#*
#* @return A Date value, the date an item can be received
#*
#*!
Funprog GET_THEORETICAL_LEADTIME_LIMIT(SITE, ITEM)
Value Char SITE
Value Char ITEM

Local Date LEADTIME
Local Date NULLDATE

  Local File ITMFACILIT [YITF]
  Local File PORDER  [YPOH]
  Local File PORDERQ [YPOQ]

  Read [YITF]ITF0 = ITEM ; SITE

  Link [YPOQ] With [YPOH]POH0 ~= [YPOQ]POHNUM As   [YLNK]
&             Where [YPOQ]ITMREF = ITEM
&               and [YPOQ]PRHFCY = SITE
&               and [YPOH]OCNDAT <> NULLDATE
&               and [YPOQ]LINCLEFLG = 1
&             Order By [YPOQ]EXTRCPDAT Desc

  Read [YLNK] First

  LEADTIME = max(date$ + [YITF]OFS, [YPOQ]EXTRCPDAT)

End LEADTIME

##############################################################################################################
# < WIST >
#**
#* Gets the current total quantity in stock of an item, of a certain status.
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#* @param ITEM_STATUS The status to return the items stock quantity of
#*
#* @return An integer value, the stock quantity of the item
#*!
Funprog GET_ITEM_STOCK_QTY(SITE, ITEM, ITEM_STATUS)
Value Char SITE
Value Char ITEM
Value Char ITEM_STATUS

Local Decimal QTY

  Local File ITMMVT [YITV]
  Read [YITV]ITV0 = ITEM ; SITE

  Case ITEM_STATUS
    When "A", "A1"
      QTY = [YITV]PHYSTO + [YITV]PLFPHYSTO
    When "R"
      QTY = [YITV]REJSTO + [YITV]PLFREJSTO
    When "Q"
      QTY = [YITV]CTLSTO + [YITV]PLFCTLSTO
  Endcase

End [L]QTY

##############################################################################################################
# < WIST >
#**
#* Gets the stock quantity of an item with the specified allocation type. Allocation types:
#*
#* <pre>
#* 1 - Global
#* 2 - Detailed
#* 3 - Inbound transfer
#* 4 - Shortages/Detailed
#* 5 - Shortages/Global
#* 6 - Outbound transfer
#* </pre>
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#* @param ALLOCATION_TYPE The allocation type of which to return items with. See all possible types in the
#*                        function description above
#*
#* @return An integer value, the item quantity with the specified allocation type
#*!


Funprog GET_ITEM_STOCK_QTY_BY_ALLOC(SITE, ITEM, ALLOCATION_TYPE)
Value Char SITE
Value Char ITEM
Value Integer ALLOCATION_TYPE

  Local File STOCK  [YSTO]
  Local File STOALL [YSTA]

  Link [YSTA] With [YSTO]STO0 ~= [YSTA]STOFCY ; [YSTA]STOCOU
&             As   [YLNK]
&             Where [YSTA]STOFCY = SITE and [YSTA]ITMREF = ITEM and [YSTA]ALLTYP = ALLOCATION_TYPE

  Local Decimal COUNT

  For [YLNK]
    COUNT += [YSTA]QTYSTU
  Next

End COUNT

##############################################################################################################
# < WIST >
#**
#* Gets the expected stock quantity of an item at a certain date, <b>including</b> the addition and
#* subtraction of the quantities of all purchase and sales order scheduled that day.
#*
#* It is calculated by the following formula:
#* <pre></pre>
#*
#* <code>Stock Quantity - Outgoing Items (Until date) + Incoming Items (Until date)</code>
#* <pre></pre>
#*
#* @param SITE The relevant site
#* @param ITEM The item to deliver.
#* @param XDATE The date the the item should be delivered on or before.
#*
#* @return An integer value, the available quantity
#*!
Funprog GET_ITEM_STOCK_QTY_AT_DATE(SITE, ITEM, XDATE)
Value Char SITE
Value Char ITEM
Value Date XDATE
#-
Local Decimal STOCK_QTY

  STOCK_QTY = func GET_ITEM_STOCK_QTY(ITEM, SITE, "A")
&           - func GET_ITEM_OUT_QTY_UNTIL_DATE(SITE, ITEM, XDATE)
&           + func GET_ITEM_IN_QTY_UNTIL_DATE(SITE, ITEM, XDATE)

End STOCK_QTY


##############################################################################################################
# < WIST >
#**
#* Gets the expected stock quantity of an item after all active receipts and sales orders have been
#* received/delivered.
#*
#* It is calculated by the following formula:
#* <pre></pre>
#*
#* <code>Stock Quantity - Outgoing Items + Incoming Items</code>
#* <pre></pre>
#*
#* @param SITE The relevant site
#* @param ITEM The item to deliver.
#*
#* @return An integer value, the expected quantity
#*!
Funprog GET_ITEM_STOCK_QTY_EXPECTED(SITE, ITEM)
Value Char SITE
Value Char ITEM
#-
Local Decimal STOCK_QTY

  STOCK_QTY = func GET_ITEM_STOCK_QTY(SITE, ITEM, "A")
&           - func GET_ITEM_OUT_QTY(SITE, ITEM)
&           + func GET_ITEM_IN_QTY(SITE, ITEM)

End STOCK_QTY

##############################################################################################################
# < WIST >
#**
#* Gets the available stock quantity of an item, subtracting the quantities on all open sales orders from
#* the current stock quantity.
#*
#* It is calculated by the following formula:
#* <pre></pre>
#*
#* <code>Stock Quantity - Outgoing Items</code>
#* <pre></pre>
#*
#* @param SITE The relevant site
#* @param ITEM The item to deliver
#*
#* @return An integer value, the available quantity
#*!
Funprog GET_ITEM_STOCK_QTY_AVAILABLE(SITE, ITEM)
Value Char SITE
Value Char ITEM
#-
Local Decimal STOCK_QTY

  STOCK_QTY = func GET_ITEM_STOCK_QTY(SITE, ITEM, "A")
&           - func GET_ITEM_OUT_QTY(SITE, ITEM)

End STOCK_QTY

##############################################################################################################
# < WIST >
#**
#* Gets an items availability at a date, decided by the priority given.
#* <pre></pre>
#* The priority is an order lines XITMAVAPRIO value in its SORDERQ table line,
#* and represents the chronological order in which all order lines are availability checked. Any sales
#* order lines checked prior to PRIORITY (= higher priority) will deduct from the available
#* quantity at XDATE, while lines checked after PRIORITY (= lower priority) will be ignored.
#* <pre></pre>
#*
#* @param SITE The relevant site
#* @param ITEM The item to deliver
#* @param XDATE The date to get the item quantity of
#* @param PRIORITY The sales order line priority to base the search on
#*
#* @return An integer value, the available quantity
#*!
Funprog GET_ITEM_AVAILABILITY_AT_DATE_BY_PRIO(SITE, ITEM, XDATE, PRIORITY)
Value Char SITE
Value Char ITEM
Value Date XDATE
Value Char PRIORITY
#-
Local Decimal AVAILABLE_QTY

  AVAILABLE_QTY = func GET_ITEM_STOCK_QTY(SITE, ITEM, "A")
&               - func GET_ITEM_OUT_QTY_UNTIL_DATE_BY_PRIO(SITE, ITEM, XDATE, PRIORITY)
&               + func GET_ITEM_IN_QTY_UNTIL_DATE_ACKNOWLEDGED(SITE, ITEM, XDATE)


#  Infbox "AVAILABILITY AT DATE: " + num$(XDATE),
#&       "",
#&       "I LAGER IDAG: " + num$(func GET_ITEM_STOCK_QTY(SITE, ITEM, "A")),
#&       "UTGÅENDE (MED HÖGRE PRIO): " + num$(func GET_ITEM_OUT_QTY_UNTIL_DATE_BY_PRIO(SITE, ITEM, XDATE, PRIORITY)),
#&       "INKOMMANDE: " + num$(func GET_ITEM_IN_QTY_UNTIL_DATE_ACKNOWLEDGED(SITE, ITEM, XDATE)),
#&       "",
#&       "TILLGÄNGLIGT: " + num$(AVAILABLE_QTY)

End AVAILABLE_QTY

##############################################################################################################
# < WIST >
#**
#* Gets the total quantity of an item on sales orders with a delivery date prior to or
#* on a date, and that isn't assigned to a pick ticket or delivery.
#*
#* @param SITE The relevant site
#* @param ITEM The item to deliver.
#* @param DAT The date the the item should be delivered on or before.
#*
#* @return An integer value, the quantity to be delivered.
#*!
Funprog GET_QTY_TO_DELIVER_BEFORE_AT_DATE(SITE, ITEM, DAT)
Value Char SITE
Value Char ITEM
Value Date DAT

  Local File SORDERQ [F:YSOQ]
  Filter [F:YSOQ] Where STOFCY = SITE and ITMREF = ITEM and SHIDAT <= DAT and SOQSTA < 3  # SOQSTA = 3 avslutad rad

  Local Decimal QTY

  For [F:YSOQ]

    [L]QTY += ([F:YSOQ]QTYSTU - [F:YSOQ]PREQTYSTU - [F:YSOQ]ODLQTYSTU - [F:YSOQ]DLVQTYSTU)

  Next

End [L]QTY

##############################################################################################################
# < WIST >
#**
#* Gets the first empty location of the specified location type, in alphanumeric
#* order.
#*
#* @param SITE The relevant site
#* @param LOC_TYPE The location type of which to search for a location
#* @param MIN_LOC If this value is not null, the function returns the first empty location alphanumerically following this one
#*
#* @return A string value, the first empty location
#*!
Funprog GET_EMPTY_LOC_FROM_TYPE(SITE, LOC_TYPE, MIN_LOC)
Value Char SITE
Value Char LOC_TYPE
Value Char MIN_LOC

  Local File STOLOC [YSL]
  Filter [YSL] Where STOFCY = SITE and LOCTYP = LOC_TYPE and OCPCOD = 1
&              Order By LOC Asc

  Read [YSL] First

End [YSL]LOC

##############################################################################################################
# < WIST >
#**
#* Gets the first location (empty or not) of the specified location type, in alphanumeric
#* order.
#*
#* @param SITE The relevant site
#* @param LOC_TYPE The location type of which to search for a location
#*
#* @return A string value, the first location
#*!
Funprog GET_LOC_FROM_TYPE(SITE, LOC_TYPE)
Value Char SITE
Value Char LOC_TYPE

  Local File STOLOC [YSL]
  Filter [YSL] Where STOFCY = SITE and LOCTYP = LOC_TYPE
&              Order By LOC Asc

  Read [YSL] First

End [YSL]LOC

##############################################################################################################
# < WIST >
#**
#* Gets the quantity of an item on a location.
#*
#* @param SITE The relevant site
#* @param LOCATION The location on which to count the item
#* @param ITEM The item to get the quantity of
#*
#* @return An integer value, the item quantity
#*!
Funprog GET_LOC_ITEM_QTY(SITE, LOCATION, ITEM)
Value Char SITE
Value Char LOCATION
Value Char ITEM

  Local File STOCK [YSTO]
  Filter [YSTO] Where STOFCY = SITE and LOC = LOCATION and ITMREF = ITEM

  Local Decimal COUNT

  For [YSTO]
    COUNT += [YSTO]QTYSTU
  Next

End COUNT

##############################################################################################################
# < WIST >
#**
#* Gets the quantity of an item on a location with the specified allocation type. Allocation types:
#*
#* <pre>
#* 1 - Global
#* 2 - Detailed
#* 3 - Inbound transfer
#* 4 - Shortages/Detailed
#* 5 - Shortages/Global
#* 6 - Outbound transfer
#* </pre>
#*
#* @param SITE The relevant site
#* @param LOCATION The location on which to count the item
#* @param ITEM The item to get the quantity of
#* @param ALLOCATION_TYPE The allocation type of which to return items with. See all possible types in the
#*                        function description above
#*
#* @return An integer value, the item quantity with the specified allocation type
#*!


Funprog GET_LOC_ITEM_QTY_BY_ALLOC(SITE, LOCATION, ITEM, ALLOCATION_TYPE)
Value Char SITE
Value Char LOCATION
Value Char ITEM
Value Integer ALLOCATION_TYPE

  Local File STOCK  [YSTO]
  Local File STOALL [YSTA]

  Link [YSTA] With [YSTO]STO0 ~= [YSTA]STOFCY ; [YSTA]STOCOU
&             As   [YLNK]
&             Where [YSTA]STOFCY = SITE and [YSTO]LOC = LOCATION and [YSTA]ITMREF = ITEM and [YSTA]ALLTYP = ALLOCATION_TYPE

  Local Decimal COUNT

  For [YLNK]
    COUNT += [YSTA]QTYSTU
  Next

End COUNT

##############################################################################################################
# < WIST >
#**
#* Gets the total outgoing quantity of an item, by summarizing the quantities
#* of the item on all active sales orders (labeled with status 'Firm' or 'Planned').
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#*
#* @return An integer value, the total outgoing quantity of the item
#*!
Funprog GET_ITEM_OUT_QTY(SITE, ITEM)
Value Char SITE
Value Char ITEM
#-
Local Decimal QTY

  Local File ITMMVT [YITV]
  Read [YITV]ITV0 = ITEM ; SITE

  QTY = [YITV]SALSTO

#  If clalev([ZSOQ])=0 : Local File SORDERQ [ZSOQ] : Endif
#
#  Filter [ZSOQ] Where [ZSOQ]SOQSTA < 3
#&                 and [ZSOQ]ITMREF = ITEM
#
#  For [ZSOQ]
#    QTY += ([ZSOQ]QTYSTU - [ZSOQ]ODLQTYSTU - [ZSOQ]DLVQTYSTU)
#  Next

End [L]QTY

##############################################################################################################
# < WIST >
#**
#* Gets the active outgoing quantity of an item until a date, by summarizing
#* the quantities of the item on all active sales orders (labeled with status
#* 'Firm' or 'Planned') with an end date prior or equal to the specified date.
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#* @param DAT The date up until which the outgoing quantity should be calculated
#*
#* @return An integer value, the outgoing quantity of the item
#*!
Funprog GET_ITEM_OUT_QTY_UNTIL_DATE(SITE, ITEM, DAT)
Value Char SITE
Value Char ITEM
Value Date DAT
#-
Local Decimal QTY

  If clalev([ZSOQ])=0 : Local File SORDERQ [ZSOQ] : Endif

  Filter [ZSOQ] Where [ZSOQ]SOQSTA < 3
&                 and [ZSOQ]ITMREF = ITEM
&                 and [ZSOQ]EXTDLVDAT <= DAT

  For [ZSOQ]
    QTY += ([ZSOQ]QTYSTU - [ZSOQ]ODLQTYSTU - [ZSOQ]DLVQTYSTU)
  Next

End QTY

##############################################################################################################
# < WIST >
#**
#* Gets the active outgoing quantity of an item with a priority higher than the parameter PRIORITY,
#* until a date. This is done by summarizing the quantities of the item on all active sales orders
#* (labeled with status 'Firm' or 'Planned') with an end date prior or equal to the specified date.
#*
#* <pre></pre>
#* The priority is an order lines XITMAVAPRIO value in its SORDERQ table line,
#* and represents the chronological order in which all order lines are availability checked. Any sales
#* order lines checked prior to PRIORITY (= higher priority) will deduct from the available
#* quantity at XDATE, while lines checked after PRIORITY (= lower priority) will be ignored.
#* <pre></pre>
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#* @param DAT The date up until which the outgoing quantity should be calculated
#* @param PRIORITY The sales order line priority to base the search on
#*
#* @return An integer value, the outgoing quantity of the item
#*!
Funprog GET_ITEM_OUT_QTY_UNTIL_DATE_BY_PRIO(SITE, ITEM, DAT, PRIORITY)
Value Char SITE
Value Char ITEM
Value Date DAT
Value Char PRIORITY
#-
Local Decimal QTY

  Local File SORDERQ [ZSOQ]

  Filter [ZSOQ] Where [ZSOQ]SOQSTA < 3
&                 and [ZSOQ]ITMREF = ITEM
&                 and [ZSOQ]EXTDLVDAT <= DAT
&                 and [ZSOQ]XITMAVAPRIO < PRIORITY

  For [ZSOQ]
    QTY += ([ZSOQ]QTYSTU - [ZSOQ]ODLQTYSTU - [ZSOQ]DLVQTYSTU)
  Next

End QTY

##############################################################################################################
# < WIST >
#**
#* Gets the total incoming quantity of an item, by summarizing the quantities
#* of the item on all active purchase order lines (labeled with LINCLEFLG = 1).
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#*
#* @return An integer value, the total incoming quantity of the item
#*!
Funprog GET_ITEM_IN_QTY(SITE, ITEM)
Value Char SITE
Value Char ITEM

Local Decimal QTY

  Local File PORDER  [YPOH]
  Local File PORDERQ [YPOQ]

  Link [YPOQ] With  [YPOH]POH0 ~= [YPOQ]POHNUM As [YLNK]
&             Where [YPOQ]PRHFCY = SITE
&               and [YPOQ]ITMREF = ITEM
&               and [YPOQ]LINCLEFLG = 1
&             Order By [YPOQ]EXTRCPDAT Desc

  For [YLNK]
    QTY += ([YPOQ]QTYSTU - [YPOQ]RCPQTYSTU)
  Next

End QTY

##############################################################################################################
# < WIST >
#**
#* Gets the total incoming quantity of an item, by summarizing the quantities
#* of the item on all active purchase order lines (labeled with LINCLEFLG = 1).
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#*
#* @return An integer value, the total incoming quantity of the item
#*!
Funprog GET_ITEM_IN_QTY_ACKNOWLEDGED(SITE, ITEM)
Value Char SITE
Value Char ITEM

Local Decimal QTY

  Local File PORDER  [YPOH]
  Local File PORDERQ [YPOQ]

  Link [YPOQ] With  [YPOH]POH0 ~= [YPOQ]POHNUM As [YLNK]
&             Where [YPOQ]PRHFCY = SITE
&               and [YPOQ]ITMREF = ITEM
&               and [YPOH]OCNDAT <> [00/00/0000]
&               and [YPOQ]LINCLEFLG = 1
&             Order By [YPOQ]EXTRCPDAT Desc

  For [YLNK]
    QTY += ([YPOQ]QTYSTU - [YPOQ]RCPQTYSTU)
  Next

End QTY

##############################################################################################################
# < WIST >
#**
#* Gets the active incoming quantity of an item until a date, by summarizing
#* the quantities of the item on all active purchase order lines (labeled with LINCLEFLG = 1)
#* with an end date prior or equal to the specified date.
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#* @param DAT The date up until which the incoming quantity should be calculated
#*
#* @return An integer value, the incoming quantity of the item
#*!
Funprog GET_ITEM_IN_QTY_UNTIL_DATE(SITE, ITEM, UNTIL_DATE)
Value Char SITE
Value Char ITEM
Value Date UNTIL_DATE

Local Decimal QTY

  Local File PORDER  [YPOH]
  Local File PORDERQ [YPOQ]

  Link [YPOQ] With  [YPOH]POH0 ~= [YPOQ]POHNUM As [YLNK]
&             Where [YPOQ]PRHFCY = SITE
&               and [YPOQ]ITMREF = ITEM
&               and [YPOQ]EXTRCPDAT <= UNTIL_DATE
&               and [YPOQ]LINCLEFLG = 1
&             Order By [YPOQ]EXTRCPDAT Desc

  For [YLNK]
    QTY += ([YPOQ]QTYSTU - [YPOQ]RCPQTYSTU)
  Next

End QTY

##############################################################################################################
# < WIST >
#**
#* Gets the active incoming quantity of an item until a date, by summarizing
#* the quantities of the item on all active purchase order lines (labeled with LINCLEFLG = 1)
#* with an end date prior or equal to the specified date. Only purchase orders with an acknowledgement
#* date are considered.
#*
#* @param SITE The relevant site
#* @param ITEM The item to get the quantity of
#* @param UNTIL_DATE The date up until which the incoming quantity should be calculated
#*
#* @return An integer value, the incoming quantity of the item
#*!
Funprog GET_ITEM_IN_QTY_UNTIL_DATE_ACKNOWLEDGED(SITE, ITEM, UNTIL_DATE)
Value Char SITE
Value Char ITEM
Value Date UNTIL_DATE

Local Decimal QTY

  Local File PORDER  [YPOH]
  Local File PORDERQ [YPOQ]

  Link [YPOQ] With  [YPOH]POH0 ~= [YPOQ]POHNUM As [YLNK]
&             Where [YPOQ]PRHFCY = SITE
&               and [YPOQ]ITMREF = ITEM
&               and [YPOH]OCNDAT <> [00/00/0000]
&               and [YPOQ]EXTRCPDAT <= UNTIL_DATE
&               and [YPOQ]LINCLEFLG = 1
&             Order By [YPOQ]EXTRCPDAT Desc

  For [YLNK]
    QTY += ([YPOQ]QTYSTU - [YPOQ]RCPQTYSTU)
  Next

End QTY

