##############################################################################################################
# < WIST >
#**
#* Creates and initializes a log instance.
#*
#* @param LOG_NAME The name of the log file
#* @param LOG_TITLE The title of the log file (this is how the log file is presented in Sage)
#*
#*!
Funprog START_LOG(LOG_NAME, LOG_TITLE)
Value Char LOG_NAME
Value Char LOG_TITLE

  Global Instance XSS_LOG Using C_ALOG
  XSS_LOG = NewInstance C_ALOG AllocGroup null

  OK=fmet XSS_LOG.ASETNAME(LOG_NAME)
  OK=fmet XSS_LOG.ABEGINLOG(LOG_TITLE)

End XSS_LOG

##############################################################################################################
# < WIST >
#**
#* Ends the logging process and closes the log file. The log can be displayed on the users screen if desired.
#*
#* @param LOG_INSTANCE The log instance to end
#* @param DISPLAY_LOG If non-zero, the log is displayed
#*
#*!
Subprog END_LOG(LOG_INSTANCE, DISPLAY_LOG)
Variable Instance LOG_INSTANCE Using C_ALOG
Value Integer DISPLAY_LOG

  OK=fmet LOG_INSTANCE.AENDLOG
  FreeGroup LOG_INSTANCE

  If DISPLAY_LOG
    [V]GTRACE = LOGNAME
    Call LEC_TRACE From LECFIC
  Endif

End

##############################################################################################################
# < WIST >
#**
#* Writes a line of text to a log instance.
#*
#* @param LOG_INSTANCE The log instance on which to write
#* @param TEXT The text to print
#*
#*!
Subprog LOG_TEXT(LOG_INSTANCE, TEXT)
Variable Instance LOG_INSTANCE Using C_ALOG
Value Char TEXT

  OK=fmet LOG_INSTANCE.APUTLINE(TEXT, OK)

End

##############################################################################################################
# < WIST >
#**
#* Writes a warning to a log instance.
#*
#* @param LOG_INSTANCE The log instance on which to write
#* @param TEXT The text to print
#*
#*!
Subprog LOG_WARNING(LOG_INSTANCE, TEXT)
Variable Instance LOG_INSTANCE Using C_ALOG
Value Char TEXT

  OK=fmet LOG_INSTANCE.APUTLINE(TEXT, [V]CST_AWARNING)

End

##############################################################################################################
# < WIST >
#**
#* Writes an error to a log instance.
#*
#* @param LOG_INSTANCE The log instance on which to write
#* @param TEXT The text to print
#*
#*!
Subprog LOG_ERROR(LOG_INSTANCE, TEXT)
Variable Instance LOG_INSTANCE Using C_ALOG
Value Char TEXT

  OK=fmet LOG_INSTANCE.APUTLINE(TEXT, [V]CST_AERROR)

End

##############################################################################################################
# < WIST >
#**
#* Prints a line in the log instance displaying the amount of warnings and errors.
#*
#* @param LOG_INSTANCE The log instance on which to write
#*
#*!
Subprog LOG_PRINT_ERRORS_WARNINGS(LOG_INSTANCE)
Variable Instance LOG_INSTANCE Using C_ALOG

  OK=fmet LOG_INSTANCE.APUTLINE(num$(LOG_INSTANCE.NBERR) + " errors found. " + num$(LOG_INSTANCE.NBWARN) + " warnings found.", OK)

End

##############################################################################################################
# < WIST >
#**
#* Gets the amount of warnings in a log instance.
#*
#* @param LOG_INSTANCE The log instance to look at
#*
#*!
Funprog GET_LOG_WARNING_QTY(LOG_INSTANCE)
Variable Instance LOG_INSTANCE Using C_ALOG
End LOG_INSTANCE.NBWARN

##############################################################################################################
# < WIST >
#**
#* Gets the amount of errors in a log instance.
#*
#* @param LOG_INSTANCE The log instance to look at
#*
#*!
Funprog GET_LOG_ERROR_QTY(LOG_INSTANCE)
Variable Instance LOG_INSTANCE Using C_ALOG
End LOG_INSTANCE.NBERR
